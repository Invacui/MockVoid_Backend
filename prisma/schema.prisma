// Prisma schema for MockAPI Generator Platform

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

generator client {
  provider = "prisma-client-js"
}



// =====================
// Models
// =====================

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  email       String    @unique
  name        String?
  phone       Phone     @unique
  role        Role      @default(USER)
  isVerified  Boolean   @default(false) 
  isDeleted   Boolean   @default(false)

  // OAuth (Google login etc.)
  provider    String?   // e.g. "google"
  providerId  String?   // google sub ID
  tokens      Token[]
  password   String?   

  // Subscription and Payments
  credits    Int       @default(1000) 

  // Relations
  projects    Project[]
  subscription Subscription?
  payments    Payment[]
}

model Token {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])

  accessToken  String
  refreshToken String?
  expiresAt    DateTime
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String
  description String?

  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])

  apis        Api[]
}

model Api {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String
  method      String   // Only GET for MVP, later POST/PUT/DELETE
  path        String   // e.g. "/users"
  allowedParams Json?
  mockData    Json?    // Generated data snapshot

  projectId   String   @db.ObjectId
  project     Project  @relation(fields: [projectId], references: [id])
}

model Subscription {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])

  plan        Plan     @default(FREE)
  validUntil  DateTime?
}

model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])

  amount      Float
  currency    String   @default("USD")
  status      PaymentStatus @default(PENDING)
  provider    String   // e.g. "stripe", "razorpay"
  providerTxnId String?
}


// =====================
// Enums
// =====================
enum Role {
  ADMIN
  USER
}

enum Plan {
  FREE
  PRO
  COPILOT
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

type Phone {
  countryCode String
  number      String
}